//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Input/NukeInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NukeInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NukeInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""NukeInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""e0b8f78e-e41d-420f-8249-59780da3c812"",
            ""actions"": [
                {
                    ""name"": ""Tap"",
                    ""type"": ""Button"",
                    ""id"": ""2798a651-8f57-4a13-9257-d60a4295e220"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TapHold"",
                    ""type"": ""Button"",
                    ""id"": ""f8fc5782-83df-41d2-810d-6faf4ff3737e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mash"",
                    ""type"": ""Button"",
                    ""id"": ""0e573730-dda4-4c89-aa76-96e289bc548a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""MultiTap(tapCount=3)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QuitGame"",
                    ""type"": ""Button"",
                    ""id"": ""4b51d923-3ac0-4db6-a1fd-42a9bc280087"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""16228455-be65-4f5e-a79c-a745c2f2616b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8340a5e6-13d6-4622-bab2-6c1caec2c6a5"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TapHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a55c0934-fddc-43ba-83e6-2898caf5960d"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""QuitGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bc55b27f-1e8a-4304-8211-8e9251c59871"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Tap = m_Player.FindAction("Tap", throwIfNotFound: true);
        m_Player_TapHold = m_Player.FindAction("TapHold", throwIfNotFound: true);
        m_Player_Mash = m_Player.FindAction("Mash", throwIfNotFound: true);
        m_Player_QuitGame = m_Player.FindAction("QuitGame", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Tap;
    private readonly InputAction m_Player_TapHold;
    private readonly InputAction m_Player_Mash;
    private readonly InputAction m_Player_QuitGame;
    public struct PlayerActions
    {
        private @NukeInputActions m_Wrapper;
        public PlayerActions(@NukeInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Tap => m_Wrapper.m_Player_Tap;
        public InputAction @TapHold => m_Wrapper.m_Player_TapHold;
        public InputAction @Mash => m_Wrapper.m_Player_Mash;
        public InputAction @QuitGame => m_Wrapper.m_Player_QuitGame;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Tap.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTap;
                @Tap.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTap;
                @Tap.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTap;
                @TapHold.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTapHold;
                @TapHold.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTapHold;
                @TapHold.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTapHold;
                @Mash.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMash;
                @Mash.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMash;
                @Mash.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMash;
                @QuitGame.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnQuitGame;
                @QuitGame.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnQuitGame;
                @QuitGame.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnQuitGame;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Tap.started += instance.OnTap;
                @Tap.performed += instance.OnTap;
                @Tap.canceled += instance.OnTap;
                @TapHold.started += instance.OnTapHold;
                @TapHold.performed += instance.OnTapHold;
                @TapHold.canceled += instance.OnTapHold;
                @Mash.started += instance.OnMash;
                @Mash.performed += instance.OnMash;
                @Mash.canceled += instance.OnMash;
                @QuitGame.started += instance.OnQuitGame;
                @QuitGame.performed += instance.OnQuitGame;
                @QuitGame.canceled += instance.OnQuitGame;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnTap(InputAction.CallbackContext context);
        void OnTapHold(InputAction.CallbackContext context);
        void OnMash(InputAction.CallbackContext context);
        void OnQuitGame(InputAction.CallbackContext context);
    }
}
